ZDL compiling instructions
----------
1. License
----------
Copyright (c) 2023 spacebub
Copyright (c) 2018-2019 Lcferrum
Copyright (c) 2004-2012 ZDL Software Foundation

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

You should have received a copy of the GNU General Public License along with
this program. If not, see http://www.gnu.org/licenses/.

This program uses SimpleWFA and miniz libraries. See AUTHORS and associated
LICENSE files for details.

----------
2. General
----------
ZDL is written in C++ and uses Qt 6 framework. To be able to compile ZDL you
should install Qt 6 SDK and CMake. ZDL also uses SimpleWFA and miniz libraries
which are statically linked and included with the sources. Sources can be 
downloaded from official GitHub page:

	https://github.com/spacebub/qzdl
	
After compiling, see README file for instructions on using ZDL.

----------------------
3. General Compilation
----------------------
qzdl uses CMake to generate the required project files. By default it uses Qt6
but there is a QT5 option provided for convenient setup. To generate a Qt5 build
you can set the variable during setup:

	cmake .. -DQT5=ON
 
  3.1.1 Compilation on Windows
  ----------------------------
Create a build directory in the repository root, enter it then configure with CMake:

	mkdir build
	cd build
	cmake .. -G "{Your VS version}" -DCMAKE_PREFIX_PATH="{Path to qt installation}" -DCMAKE_CXX_FLAGS="/MP"

Note that without -DCMAKE_CXX_FLAGS="/MP" the build will be single threaded and 
very slow. To know which version to pass to -G you can consult:

	https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html#visual-studio-generators

After the build is complete and you have a qzdl.exe file, assuming you have
the correct Qt directory registered in your PATH:

	windeployqt --release .\qzdl.exe

This will copy over the required Dlls.

  3.1.2 Static Compilation on Windows
  -----------------------------------
For a static windows build you need to link with a static build of qtbase.
The easiest way to do this is through vcpkg. The following is an example
for 64 bit builds:

  VCPKG:
	git clone https://github.com/Microsoft/vcpkg.git  (in a suitable dir)
	cd vcpkg
	.\bootstrap-vcpkg.bat
	.\vcpkg install qtbase:x64-windows-static
  
  BUILD:
	enter the qzdl repository root where you cloned the project
	mkdir build
    cd build
    cmake .. -G "Visual Studio 17 2022" \
    -A x64 \
    -DCMAKE_TOOLCHAIN_FILE="{vcpkg directory from previous step}\scripts\buildsystems\vcpkg.cmake" \
    -DCMAKE_CXX_FLAGS="/MT /MP" \
    -DVCPKG_TARGET_TRIPLET=x64-windows-static
    
Note that if the /MT flag is not set correctly you can do so manually
by right clicking the project in solution explorer then Properties > 
C/C++ > Code Generation and changing the Runtime Library property.
If the /MP flag is not set correctly you can do so manually to speed
up compilation. The /MT flag is needed for static builds.

For 32bit builds you can set the CMake platform to Win32 with -A Win32.
The 32bit triplet is x86-windows-static.

  3.2.1 Compile for Linux
  -----------------------
CMake by default will generate the necessary makefile:

	mkdir build
    cd build
    cmake ..
    make -j$(nproc --all)
    
  3.2.2 Static Compilation on Linux
  ---------------------------------
You will have to manually build a static version of qtbase and then
link to it during compilation.
    
